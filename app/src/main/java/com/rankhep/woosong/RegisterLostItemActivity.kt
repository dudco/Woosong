package com.rankhep.woosongimport android.Manifestimport android.content.Intentimport android.content.pm.PackageManagerimport android.database.Cursorimport android.graphics.BitmapFactoryimport android.net.Uriimport android.os.Buildimport android.os.Bundleimport android.provider.MediaStoreimport android.support.v7.app.AppCompatActivityimport android.util.Logimport android.widget.Toastimport com.gun0912.tedpermission.PermissionListenerimport com.gun0912.tedpermission.TedPermissionimport com.rankhep.woosong.model.Stationimport com.rankhep.woosong.utils.NetworkHelperimport kotlinx.android.synthetic.main.activity_register_lost_item.*import okhttp3.MediaTypeimport okhttp3.MultipartBodyimport okhttp3.RequestBodyimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.io.Fileclass RegisterLostItemActivity : AppCompatActivity() {    private var file: File? = null    private var station = ""    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_register_lost_item)        val qr = intent.getStringExtra("qr")        NetworkHelper.networkInstance.getStation(qr).enqueue(object : Callback<Station> {            override fun onFailure(p0: Call<Station>, p1: Throwable) {                Toast.makeText(applicationContext, "역 정보를 불러오지 못했습니다.", Toast.LENGTH_SHORT).show()                p1.printStackTrace()            }            override fun onResponse(p0: Call<Station>, p1: Response<Station>) {                p1.body()?.let {                    if (p1.isSuccessful) {                        station = it.message                        Toast.makeText(applicationContext, it.message, Toast.LENGTH_SHORT).show()                    }                }            }        })        addPhotoButton.setOnClickListener {            val permissionResult: Boolean = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_DENIED            } else {                true            }            if (!permissionResult) {                goToAlbum()            } else {                tedPermission()            }        }        registerBtn.setOnClickListener {            val name = nameEditText.text.toString()            val date = timeEditText.text.toString()            val location = locationEditText.text.toString()            var feature = featureEditText.text.toString()            if (name == "") {                Toast.makeText(applicationContext, "분실물 이름을 입력해주세요.", Toast.LENGTH_SHORT).show()            } else if (date == "" || !date.matches(Regex("\\d\\d:\\d\\d"))) {                Toast.makeText(applicationContext, "00:00(시:분) 형식에 맞춰 입력해주세요.", Toast.LENGTH_SHORT).show()            } else if (location == "") {                Toast.makeText(applicationContext, "장소를 입력해주세요.", Toast.LENGTH_SHORT).show()            } else if (file == null) {                Toast.makeText(applicationContext, "사진을 넣어주세요.", Toast.LENGTH_SHORT).show()            } else {                val requestFile = RequestBody.create(MediaType.parse("multipart/png"), file)                val imgBody = MultipartBody.Part.createFormData("image", file?.name, requestFile)                val nameBody = RequestBody.create(okhttp3.MultipartBody.FORM, name)                val dateBody = RequestBody.create(okhttp3.MultipartBody.FORM, date)                val locationBody = RequestBody.create(okhttp3.MultipartBody.FORM, location)                val featureBody = RequestBody.create(okhttp3.MultipartBody.FORM, feature)                val stationBody = RequestBody.create(okhttp3.MultipartBody.FORM, station)                NetworkHelper.networkInstance                    .registerLostItem(                        imgBody, nameBody, dateBody,                        locationBody, stationBody, featureBody                    )                    .enqueue(object : Callback<Any> {                        override fun onFailure(call: Call<Any>, t: Throwable) {                            t.printStackTrace()                        }                        override fun onResponse(call: Call<Any>, response: Response<Any>) {                            if (response.isSuccessful) {                                Toast.makeText(applicationContext, "감사합니다.", Toast.LENGTH_SHORT).show()                                finish()                            } else {                                Log.e("asd", response.message())                            }                        }                    })            }        }    }    private fun goToAlbum() {        val intent = Intent(Intent.ACTION_PICK)        intent.type = MediaStore.Images.Media.CONTENT_TYPE        startActivityForResult(intent, 100)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        if (requestCode == 100) {            val str = data!!.data!!.toString()            file = getFile(str)            file?.let {                val options = BitmapFactory.Options()                val originalBm = BitmapFactory.decodeFile(it.getAbsolutePath(), options)                img.setImageBitmap(originalBm)            }        }    }    private val mPermissionListener = object : PermissionListener {        override fun onPermissionGranted() {            goToAlbum()        }        override fun onPermissionDenied(deniedPermissions: List<String>) {            Toast.makeText(this@RegisterLostItemActivity, "권한이 거절되었습니다.\n\$deniedPermissions", Toast.LENGTH_SHORT)                .show()        }    }    private fun getFile(imageUri: String): File? {        val uri: Uri? = Uri.parse(imageUri)        var cursor: Cursor? = null        try {            val tempFile: File            val proj = arrayOf(MediaStore.Images.Media.DATA)            assert(uri != null)            cursor = applicationContext.contentResolver.query(uri!!, proj, null, null, null)            assert(cursor != null)            val columnIndex = cursor!!.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)            cursor.moveToFirst()            tempFile = File(cursor.getString(columnIndex))            return tempFile        } catch (e: Exception) {            e.printStackTrace()        } finally {            cursor?.close()        }        return null    }    private fun tedPermission() {        TedPermission.with(this)            .setPermissionListener(mPermissionListener)            .setDeniedMessage("권한 설정을 위하여 다음 경로로 이동하여주세요.\n[설정] > [권한]")            .setPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA)            .check()    }}